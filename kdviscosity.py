# -*- coding: utf-8 -*-
"""KD粘性推算.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pxOCxN_jA2p7dUBYPPnNJ16iJ5RddyNN
"""

#@title **Krieger-Dougherty（クリーガー・ドーハティ） 粘性推算:**

# @markdown #####基材粘度 [mPa・s]（def. エポキシ樹脂単体の粘度 1000）
eta0 = '500' #@param {type:"string"}
# @markdown #####固有粘度（形状依存性, def. 球体2.5）
eta_intrinsic = '2.5' #@param {type:"string"}
# @markdown #####最大充填体積分率（粒子1を隙間なく詰めたときの上限, def. 0.58）
phi_max_1 = '0.52' #@param {type:"string"}
# @markdown #####最大充填体積分率（粒子2を隙間なく詰めたときの上限, def. 0.56）
phi_max_2 = '0.58' #@param {type:"string"}
# @markdown #####粒子1と2を比較しますか？
bool_comp = True #@param {type:"boolean"}
# @markdown ---

eta0 = float(eta0)
eta_intrinsic = float(eta_intrinsic)
phi_max_1 = float(phi_max_1)
if bool_comp:
   phi_max_2 = float(phi_max_2)

import numpy as np
import matplotlib.pyplot as plt

# Krieger–Dougherty式
def kd_viscosity(phi, eta0, eta_intrinsic, phi_max):
    return eta0 * (1 - phi/phi_max)**(-eta_intrinsic * phi_max)

# 体積分率 φ の範囲
phi = np.linspace(0, 0.55, 100)

# 粒径による差を考慮（ここは概念的に分散性の違いを反映）
# 119.3 nm: φ_max = 0.58
# 295.4 nm: φ_max や [η] がわずかに変化した場合（分散性低下を仮定）
eta_1 = kd_viscosity(phi, eta0, eta_intrinsic, phi_max_1)
if bool_comp:
   eta_2 = kd_viscosity(phi, eta0, eta_intrinsic, phi_max_2)

# プロット
plt.figure(figsize=(6,4))
plt.plot(phi, eta_1, label='φmax: '+str(phi_max_1))
if bool_comp:
   plt.plot(phi, eta_2, label='φmax: '+str(phi_max_2))
plt.xlabel('φ')
plt.ylabel('η [mPa·s]')
plt.yscale('log')
plt.title('Krieger–Dougherty Viscosity')
plt.legend()
plt.grid(True)
plt.show()